import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as s,o as n}from"./app-DHF0Qz1w.js";const e={};function o(i,r){return n(),a("div",null,r[0]||(r[0]=[s('<h1 id="数据结构与算法" tabindex="-1"><a class="header-anchor" href="#数据结构与算法"><span>数据结构与算法</span></a></h1><p><a href="https://www.runoob.com/data-structures/data-structures-tutorial.html" target="_blank" rel="noopener noreferrer">菜鸟教程 数据结构与算法</a></p><h2 id="常见的数据结构" tabindex="-1"><a class="header-anchor" href="#常见的数据结构"><span>常见的数据结构</span></a></h2><ul><li><strong>数组（Array）</strong>：线性表。</li><li><strong>栈（Stack）</strong>：<mark>后进先出</mark>的线性表。</li><li><strong>队列（Queue）</strong>：<mark>先进先出</mark>线性表。</li><li><strong>链表（Linked List）</strong>：链表是一种数据元素按照链式存储结构进行存储的数据结构，这种存储结构具有在物理上存在非连续的特点。</li><li><strong>树（Tree）</strong>：树是典型的非线性结构，它是包括，2 个结点的有穷集合 K。</li><li><strong>图（Graph）</strong>：图是另一种非线性数据结构。在图结构中，数据结点一般称为顶点，而边是顶点的有序偶对。</li><li><strong>堆（Heap）</strong>：堆是一种特殊的树形数据结构，一般讨论的堆都是二叉堆。</li><li><strong>散列表（Hash table）</strong>：散列表源自于散列函数(Hash function)，其思想是如果在结构中存在关键字和T相等的记录，那么必定在F(T)的存储位置可以找到该记录，这样就可以不用进行比较操作而直接取得所查记录。</li></ul><h2 id="常用算法" tabindex="-1"><a class="header-anchor" href="#常用算法"><span>常用算法</span></a></h2><ul><li><strong>检索</strong>：检索就是在数据结构里查找满足一定条件的节点。一般是给定一个某字段的值，找具有该字段值的节点。</li><li><strong>插入</strong>：往数据结构中增加新的节点。</li><li><strong>删除</strong>：把指定的结点从数据结构中去掉。</li><li><strong>更新</strong>：改变指定节点的一个或多个字段的值。</li><li><strong>排序</strong>：把节点按某种指定的顺序重新排列。例如递增或递减。</li></ul>',6)]))}const c=t(e,[["render",o]]),h=JSON.parse('{"path":"/others/data-structures/","title":"数据结构与算法","lang":"zh-CN","frontmatter":{},"git":{},"readingTime":{"minutes":1.33,"words":398},"filePathRelative":"others/data-structures/README.md"}');export{c as comp,h as data};

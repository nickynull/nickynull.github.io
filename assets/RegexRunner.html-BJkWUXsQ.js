import{e as r,g as w,c as y,o as h,b as e,w as p,f as u,h as E,d as $,a as A}from"./app-BWBc4D8a.js";const R={class:"jm-block"},N={class:"line-block"},C={class:"line-block"},V={class:"line-block"},_={class:"inline-block flex1"},j={class:"inline-block"},M={class:"line-block"},v="tools-regex-cache",P={__name:"RegexRunner",setup(b){const o=r(""),n=r(""),c=r(""),i=r(!1),d=r(""),t=r("");w(()=>{m()});function m(){const a=window.$getCache(v);a&&a.constructor===Object&&(o.value=a.regex,n.value=a.regexParam,c.value=a.replacePattern,i.value=a.clearNotMatch)}function g(){if(!d.value||!o.value){window.$alert("没有可输出的内容，请检查输入/正则表达式");return}let a=d.value.split(`
`);const l=new RegExp(o.value,n.value);let s=a.map(F=>F&&(i.value&&!l.test(F)?"":F.replace(l,c.value)));t.value=s.join(`
`),t.value?window.$alert("运行完毕"):window.$alert("没有可输出的内容，请检查输入/正则表达式")}function x(){window.$copy(t.value)}function k(){d.value="",t.value="",window.$alert("清空完毕")}function f(){const a={regex:o.value,regexParam:n.value,replacePattern:c.value,clearNotMatch:i.value};window.$setCache(v,a),window.$alert("表达式已缓存，下次打开界面可直接使用")}return(a,l)=>(h(),y("div",R,[e("div",{class:"line-block"},[e("button",{onClick:g},"运行"),e("button",{onClick:x},"复制"),e("button",{onClick:k},"清空"),e("button",{onClick:f},"保存到缓存")]),e("div",N,[e("div",C,[l[6]||(l[6]=e("span",null,"正则",-1)),p(e("input",{class:"flex1","onUpdate:modelValue":l[0]||(l[0]=s=>o.value=s),placeholder:"例：[^\\d*](\\d+(\\.\\d+)?)[^\\d*]"},null,512),[[u,o.value]]),p(e("input",{"onUpdate:modelValue":l[1]||(l[1]=s=>n.value=s),placeholder:"修饰符，例：igm"},null,512),[[u,n.value]])])]),e("div",V,[e("div",_,[l[7]||(l[7]=e("span",null,"替换",-1)),p(e("input",{class:"flex1","onUpdate:modelValue":l[2]||(l[2]=s=>c.value=s),placeholder:"例：$1"},null,512),[[u,c.value]])]),e("div",j,[p(e("input",{type:"checkbox","onUpdate:modelValue":l[3]||(l[3]=s=>i.value=s),id:"clearNotMatch"},null,512),[[E,i.value]]),l[8]||(l[8]=e("label",{for:"clearNotMatch"},"无匹配时输出空字符串",-1))])]),e("div",M,[p(e("textarea",{"onUpdate:modelValue":l[4]||(l[4]=s=>d.value=s),class:"text line-huge",placeholder:"输入"},null,512),[[u,d.value]]),p(e("textarea",{"onUpdate:modelValue":l[5]||(l[5]=s=>t.value=s),class:"text line-huge",placeholder:"输出",readonly:""},null,512),[[u,t.value]])])]))}},U={__name:"RegexRunner.html",setup(b){return(o,n)=>(h(),y("div",null,[n[0]||(n[0]=e("h1",{id:"正则表达式执行器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#正则表达式执行器"},[e("span",null,"正则表达式执行器")])],-1)),$(P),n[1]||(n[1]=A('<h2 id="学习正则表达式" tabindex="-1"><a class="header-anchor" href="#学习正则表达式"><span>学习正则表达式</span></a></h2><p><a href="https://www.runoob.com/jsref/jsref-obj-regexp.html" target="_blank" rel="noopener noreferrer">菜鸟教程 JavaScript RegExp 对象</a></p><h2 id="参考表达式" tabindex="-1"><a class="header-anchor" href="#参考表达式"><span>参考表达式</span></a></h2><blockquote><p>提取路径中 XXX.XXX 形式的文字，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">.</span><span style="color:#F92672;">*</span><span style="color:#AE81FF;">[\\\\/]</span><span style="color:#F8F8F2;">(.</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">\\.[</span><span style="color:#F92672;">^</span><span style="color:#AE81FF;">\\\\/]</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">).</span><span style="color:#F92672;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>提取所有数值，替换参数 <code>$1</code>，修饰符 <code>g</code></p></blockquote><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">[</span><span style="color:#F92672;">^</span><span style="color:#F8F8F2;">\\d</span><span style="color:#AE81FF;">]</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">(\\d</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">\\.</span><span style="color:#F8F8F2;">\\d</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;">)</span><span style="color:#AE81FF;">[</span><span style="color:#F92672;">^</span><span style="color:#F8F8F2;">\\d</span><span style="color:#AE81FF;">]</span><span style="color:#F92672;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>提取第一次出现的数值，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">[</span><span style="color:#F92672;">^</span><span style="color:#F8F8F2;">\\d</span><span style="color:#AE81FF;">]</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">(\\d</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">\\.</span><span style="color:#F8F8F2;">\\d</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;">).</span><span style="color:#F92672;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',9))]))}},X=JSON.parse('{"path":"/tools/RegexRunner.html","title":"正则表达式执行器","lang":"zh-CN","frontmatter":{},"git":{},"readingTime":{"minutes":0.35,"words":106},"filePathRelative":"tools/RegexRunner.md"}');export{U as comp,X as data};

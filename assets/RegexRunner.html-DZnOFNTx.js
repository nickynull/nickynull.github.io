import{_,f as l,i as w,r as q,o as $,c as V,a,g as o,h as d,j as C,d as h,b as N,e as j}from"./app-yKfIKdw2.js";const M=a("h1",{id:"正则表达式执行器",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#正则表达式执行器","aria-hidden":"true"},"#"),h(" 正则表达式执行器")],-1),R={class:"line-block"},P={class:"line-block"},U=a("span",null,"正则",-1),X={class:"line-block"},y={class:"inline-block flex1"},E=a("span",null,"替换",-1),B={class:"inline-block"},I=a("label",{for:"clearNotMatch"},"无匹配时输出空字符串",-1),L={class:"line-block"},S=a("h2",{id:"学习正则表达式",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#学习正则表达式","aria-hidden":"true"},"#"),h(" 学习正则表达式")],-1),T={href:"https://www.runoob.com/jsref/jsref-obj-regexp.html",target:"_blank",rel:"noopener noreferrer"},D=j(`<h2 id="参考表达式" tabindex="-1"><a class="header-anchor" href="#参考表达式" aria-hidden="true">#</a> 参考表达式</h2><blockquote><p>提取路径中 XXX.XXX 形式的文字，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-ext="regex"><pre class="language-regex"><code><span class="token char-set class-name">.</span><span class="token quantifier number">*</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token special-escape escape">\\\\</span>/<span class="token char-class-punctuation punctuation">]</span></span><span class="token group punctuation">(</span><span class="token char-set class-name">.</span><span class="token quantifier number">+</span><span class="token special-escape escape">\\.</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token special-escape escape">\\\\</span>/<span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token char-set class-name">.</span><span class="token quantifier number">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>提取所有数值，替换参数 <code>$1</code>，修饰符 <code>g</code></p></blockquote><div class="language-regex line-numbers-mode" data-ext="regex"><pre class="language-regex"><code><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token char-set class-name">\\d</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">*</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token special-escape escape">\\.</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token group punctuation">)</span><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token char-set class-name">\\d</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>提取第一次出现的数值，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-ext="regex"><pre class="language-regex"><code><span class="token char-class"><span class="token char-class-punctuation punctuation">[</span><span class="token char-class-negation operator">^</span><span class="token char-set class-name">\\d</span><span class="token char-class-punctuation punctuation">]</span></span><span class="token quantifier number">*</span><span class="token group punctuation">(</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">+</span><span class="token group punctuation">(</span><span class="token special-escape escape">\\.</span><span class="token char-set class-name">\\d</span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token quantifier number">?</span><span class="token group punctuation">)</span><span class="token char-set class-name">.</span><span class="token quantifier number">*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),v="tools-regex-cache",J={__name:"RegexRunner.html",setup(K){const t=l(""),p=l(""),u=l(""),r=l(!1),i=l(""),c=l("");w(()=>{m()});function m(){const e=window.$getCache(v);e&&e.constructor===Object&&(t.value=e.regex,p.value=e.regexParam,u.value=e.replacePattern,r.value=e.clearNotMatch)}function g(){if(!i.value||!t.value){window.$alert("没有可输出的内容，请检查输入/正则表达式");return}let e=i.value.split(`
`);const s=new RegExp(t.value,p.value);let k=e.map(n=>n&&(r.value&&!s.test(n)?"":n.replace(s,u.value)));c.value=k.join(`
`),c.value?window.$alert("运行完毕"):window.$alert("没有可输出的内容，请检查输入/正则表达式")}function b(){window.$copy(c.value)}function x(){i.value="",c.value="",window.$alert("清空完毕")}function f(){const e={regex:t.value,regexParam:p.value,replacePattern:u.value,clearNotMatch:r.value};window.$setCache(v,e),window.$alert("表达式已缓存，下次打开界面可直接使用")}return(e,s)=>{const k=q("ExternalLinkIcon");return $(),V("div",null,[M,a("div",{class:"line-block"},[a("button",{onClick:g},"运行"),a("button",{onClick:b},"复制"),a("button",{onClick:x},"清空"),a("button",{onClick:f},"保存到缓存")]),a("div",R,[a("div",P,[U,o(a("input",{class:"flex1","onUpdate:modelValue":s[0]||(s[0]=n=>t.value=n),placeholder:"例：[^\\d*](\\d+(\\.\\d+)?)[^\\d*]"},null,512),[[d,t.value]]),o(a("input",{"onUpdate:modelValue":s[1]||(s[1]=n=>p.value=n),placeholder:"修饰符，例：igm"},null,512),[[d,p.value]])])]),a("div",X,[a("div",y,[E,o(a("input",{class:"flex1","onUpdate:modelValue":s[2]||(s[2]=n=>u.value=n),placeholder:"例：$1"},null,512),[[d,u.value]])]),a("div",B,[o(a("input",{type:"checkbox","onUpdate:modelValue":s[3]||(s[3]=n=>r.value=n),id:"clearNotMatch"},null,512),[[C,r.value]]),I])]),a("div",L,[o(a("textarea",{"onUpdate:modelValue":s[4]||(s[4]=n=>i.value=n),class:"text line-huge",placeholder:"输入"},null,512),[[d,i.value]]),o(a("textarea",{"onUpdate:modelValue":s[5]||(s[5]=n=>c.value=n),class:"text line-huge",placeholder:"输出",readonly:""},null,512),[[d,c.value]])]),S,a("p",null,[a("a",T,[h("菜鸟教程 JavaScript RegExp 对象"),N(k)])]),D])}}},z=_(J,[["__file","RegexRunner.html.vue"]]);export{z as default};

import{f as t,h as x,c as k,b as l,a as f,w as r,g as u,i as w,o as E}from"./app-CQtoR6P4.js";const $={class:"jm-block"},A={class:"line-block"},C={class:"line-block"},N={class:"line-block"},R={class:"inline-block flex1"},j={class:"inline-block"},M={class:"line-block"},v="tools-regex-cache",q={__name:"RegexRunner.html",setup(V){const o=t(""),p=t(""),c=t(""),i=t(!1),d=t(""),n=t("");x(()=>{y()});function y(){const a=window.$getCache(v);a&&a.constructor===Object&&(o.value=a.regex,p.value=a.regexParam,c.value=a.replacePattern,i.value=a.clearNotMatch)}function h(){if(!d.value||!o.value){window.$alert("没有可输出的内容，请检查输入/正则表达式");return}let a=d.value.split(`
`);const e=new RegExp(o.value,p.value);let s=a.map(F=>F&&(i.value&&!e.test(F)?"":F.replace(e,c.value)));n.value=s.join(`
`),n.value?window.$alert("运行完毕"):window.$alert("没有可输出的内容，请检查输入/正则表达式")}function b(){window.$copy(n.value)}function g(){d.value="",n.value="",window.$alert("清空完毕")}function m(){const a={regex:o.value,regexParam:p.value,replacePattern:c.value,clearNotMatch:i.value};window.$setCache(v,a),window.$alert("表达式已缓存，下次打开界面可直接使用")}return(a,e)=>(E(),k("div",null,[e[9]||(e[9]=l("h1",{id:"正则表达式执行器",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#正则表达式执行器"},[l("span",null,"正则表达式执行器")])],-1)),l("div",$,[l("div",{class:"line-block"},[l("button",{onClick:h},"运行"),l("button",{onClick:b},"复制"),l("button",{onClick:g},"清空"),l("button",{onClick:m},"保存到缓存")]),l("div",A,[l("div",C,[e[6]||(e[6]=l("span",null,"正则",-1)),r(l("input",{class:"flex1","onUpdate:modelValue":e[0]||(e[0]=s=>o.value=s),placeholder:"例：[^\\d*](\\d+(\\.\\d+)?)[^\\d*]"},null,512),[[u,o.value]]),r(l("input",{"onUpdate:modelValue":e[1]||(e[1]=s=>p.value=s),placeholder:"修饰符，例：igm"},null,512),[[u,p.value]])])]),l("div",N,[l("div",R,[e[7]||(e[7]=l("span",null,"替换",-1)),r(l("input",{class:"flex1","onUpdate:modelValue":e[2]||(e[2]=s=>c.value=s),placeholder:"例：$1"},null,512),[[u,c.value]])]),l("div",j,[r(l("input",{type:"checkbox","onUpdate:modelValue":e[3]||(e[3]=s=>i.value=s),id:"clearNotMatch"},null,512),[[w,i.value]]),e[8]||(e[8]=l("label",{for:"clearNotMatch"},"无匹配时输出空字符串",-1))])]),l("div",M,[r(l("textarea",{"onUpdate:modelValue":e[4]||(e[4]=s=>d.value=s),class:"text line-huge",placeholder:"输入"},null,512),[[u,d.value]]),r(l("textarea",{"onUpdate:modelValue":e[5]||(e[5]=s=>n.value=s),class:"text line-huge",placeholder:"输出",readonly:""},null,512),[[u,n.value]])])]),e[10]||(e[10]=f('<h2 id="学习正则表达式" tabindex="-1"><a class="header-anchor" href="#学习正则表达式"><span>学习正则表达式</span></a></h2><p><a href="https://www.runoob.com/jsref/jsref-obj-regexp.html" target="_blank" rel="noopener noreferrer">菜鸟教程 JavaScript RegExp 对象</a></p><h2 id="参考表达式" tabindex="-1"><a class="header-anchor" href="#参考表达式"><span>参考表达式</span></a></h2><blockquote><p>提取路径中 XXX.XXX 形式的文字，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">.</span><span style="color:#F92672;">*</span><span style="color:#AE81FF;">[\\\\/]</span><span style="color:#F8F8F2;">(.</span><span style="color:#F92672;">+</span><span style="color:#AE81FF;">\\.[</span><span style="color:#F92672;">^</span><span style="color:#AE81FF;">\\\\/]</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">).</span><span style="color:#F92672;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>提取所有数值，替换参数 <code>$1</code>，修饰符 <code>g</code></p></blockquote><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">[</span><span style="color:#F92672;">^</span><span style="color:#F8F8F2;">\\d</span><span style="color:#AE81FF;">]</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">(\\d</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">\\.</span><span style="color:#F8F8F2;">\\d</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;">)</span><span style="color:#AE81FF;">[</span><span style="color:#F92672;">^</span><span style="color:#F8F8F2;">\\d</span><span style="color:#AE81FF;">]</span><span style="color:#F92672;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>提取第一次出现的数值，替换参数 <code>$1</code></p></blockquote><div class="language-regex line-numbers-mode" data-highlighter="shiki" data-ext="regex" style="background-color:#272822;color:#F8F8F2;"><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#AE81FF;">[</span><span style="color:#F92672;">^</span><span style="color:#F8F8F2;">\\d</span><span style="color:#AE81FF;">]</span><span style="color:#F92672;">*</span><span style="color:#F8F8F2;">(\\d</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">\\.</span><span style="color:#F8F8F2;">\\d</span><span style="color:#F92672;">+</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">?</span><span style="color:#F8F8F2;">).</span><span style="color:#F92672;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>',9))]))}},U=JSON.parse('{"path":"/tools/RegexRunner.html","title":"正则表达式执行器","lang":"zh-CN","frontmatter":{},"git":{},"readingTime":{"minutes":1.49,"words":447},"filePathRelative":"tools/RegexRunner.md"}');export{q as comp,U as data};
